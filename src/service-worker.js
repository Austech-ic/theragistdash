// /* eslint-disable no-restricted-globals */
// import { clientsClaim } from 'workbox-core';
// import { ExpirationPlugin } from 'workbox-expiration';
// import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
// import { registerRoute } from 'workbox-routing';
// import { StaleWhileRevalidate } from 'workbox-strategies';

// clientsClaim();

// // Precache all of the assets generated by your build process.
// precacheAndRoute(self.__WB_MANIFEST);

// // Set up App Shell-style routing
// const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
// registerRoute(
//   // Return false to exempt requests from being fulfilled by index.html.
//   ({ request, url }) => {
//     // If this isn't a navigation, skip.
//     if (request.mode !== 'navigate') {
//       return false;
//     }

//     // If this is a URL that starts with /_, skip.
//     if (url.pathname.startsWith('/_')) {
//       return false;
//     }

//     // If this looks like a URL for a resource, because it contains
//     // a file extension, skip.
//     if (url.pathname.match(fileExtensionRegexp)) {
//       return false;
//     }

//     // Return true to signal that we want to use the handler.
//     return true;
//   },
//   createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
// );

// // âœ… Cache external fonts (Google Fonts, CDNJS, etc.)
// registerRoute(
//   ({ url }) =>
//     url.origin.includes("fonts.googleapis.com") ||
//     url.origin.includes("fonts.gstatic.com") ||
//     url.origin.includes("cdnjs.cloudflare.com") ||
//     url.origin.includes("fonts.cdnjs.com"),
//   new StaleWhileRevalidate({
//     cacheName: "external-fonts",
//     plugins: [
//       new ExpirationPlugin({
//         maxEntries: 10,
//         maxAgeSeconds: 30 * 24 * 60 * 60, // Cache for 30 days
//       }),
//     ],
//   })
// );

// // Cache images, CSS, and JavaScript files
// registerRoute(
//   ({ request }) =>
//     request.destination === 'image' ||
//     request.destination === 'style' ||
//     request.destination === 'script',
//   new StaleWhileRevalidate({
//     cacheName: 'assets',
//     plugins: [
//       new ExpirationPlugin({
//         maxEntries: 50,
//         maxAgeSeconds: 24 * 60 * 60, // 24 hours
//       }),
//     ],
//   })
// );



// // This allows the web app to trigger skipWaiting via
// // registration.waiting.postMessage({type: 'SKIP_WAITING'})
// self.addEventListener('message', (event) => {
//   if (event.data && event.data.type === 'SKIP_WAITING') {
//     self.skipWaiting();
//   }
// });